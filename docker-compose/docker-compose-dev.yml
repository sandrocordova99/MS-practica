#version: '3.8'

services:

  configserver:
    build: # Para construir la imagen de tu microservicio Spring
      context: ../configuracion # <-- ¡¡IMPORTANTE!! Sube DOS NIVELES para llegar a 'configuracion\'
      dockerfile: Dockerfile # El Dockerfile está directamente en 'configuracion\'
    image: sandrocordova/udemy-microservicios:configserve
    ports:
      - "8080:8080"
    mem_limit: 1500m
    cpus: "2.0"
    networks:
      - practica
    environment: # <-- ¡¡¡AQUÍ ESTÁ LA SOLUCIÓN!!!
      SPRING_PROFILES_ACTIVE: git # Activa el perfil 'git'
      SPRING_CLOUD_CONFIG_SERVER_GIT_URI: https://github.com/sandrocordova99/Udemy-configservems-practica.git # La URL de tu repo Git
      SPRING_CLOUD_CONFIG_SERVER_GIT_CLONE_ON_START: "true" # Clona el repo al iniciar
      SPRING_CLOUD_CONFIG_SERVER_GIT_DEFAULT_LABEL: config # La rama remota
      SPRING_CLOUD_CONFIG_SERVER_GIT_TIMEOUT: "10" # Timeout para Git
    healthcheck: # <-- AÑADIR ESTO
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"] # Un endpoint de Spring Boot Health Check
      interval: 5s
      timeout: 3s
      retries: 20 # Intenta hasta 20 veces (100 segundos en total)
      start_period: 20s 
    
  mysql-db:
    image : mysql:5.7
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: mysql 
      MYSQL_DATABASE: practica_db
    mem_limit: 1500m
    cpus: "2.0"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - practica
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s
  
  cliente1:
    build: # <-- ¡PARA DESARROLLO, NECESITAS 'BUILD' para que compile el código local!
      context: ../Cliente1 # <-- ¡¡RUTA CORRECTA A LA CARPETA RAÍZ DE CLIENTE1!! Cuidado con el espacio en "Cliente 1"
      dockerfile: Dockerfile # El Dockerfile está directamente en 'Cliente 1\'
    image: sandrocordova/udemy-microservicios:cliente1
    ports:
      - "8081:8081"
    mem_limit: 1500m
    cpus: "2.0"
    networks:
      - practica
    depends_on:
       configserver:
        condition: service_healthy # <-- CAMBIAR ESTO
       mysql-db:
        condition: service_healthy #
    volumes: # <-- ¡¡VOLUMES PARA DESARROLLO DE CLIENTE1!!
      - ../Cliente1/src:/app/src # Sube tres niveles, entra en 'Cliente 1', luego 'src'
      - ../Cliente1/pom.xml:/app/pom.xml # Sube tres niveles, entra en 'Cliente 1', para el pom.xml
      #- ~/.m2:/root/.m2 # Tu caché de Maven (para descargas rápidas en el contenedor)
    command: mvn spring-boot:run -Dspring.jpa.hibernate.ddl-auto=update # <-- Para que el contenedor compile y ejecute tu código en tiempo real
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_CONFIG_IMPORT: optional:configserver:http://configserver:8080
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/practica_db?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: mysql
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      
networks:
  practica: 
    driver: bridge
volumes:
  mysql_data:
